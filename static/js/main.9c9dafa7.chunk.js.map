{"version":3,"sources":["components/login/Login.module.scss","components/navbar/Navbar.module.scss","components/cardsList/CardsList.module.scss","components/passwordRecovery/Password-recovery.module.scss","components/profile/PersonalInformation.module.scss","common/ModalWindow/ModalWindow.module.scss","components/profile/Profile.module.scss","components/registration/Registration.module.scss","components/enterNewPassword/Enter-new-password.module.scss","common/InputContainer/InputContainer.module.scss","common/Pagination/Pagination.module.scss","common/HeaderEnterApp/HeaderEnterApp.module.scss","common/MainActionButton/MainActionButton.module.scss","common/Preloader/Preloader.module.scss","common/Error404/Error404.module.scss","components/packsList/PacksList.module.scss","api/api.ts","components/profile/profile-reducer.ts","components/login/login-reducer.ts","common/InputContainer/InputContainer.tsx","common/validation/EmailValidation.ts","common/HeaderEnterApp/HeaderEnterApp.tsx","media/loadings/loadingBtn.svg","common/Preloader/Preloader.tsx","common/MainActionButton/MainActionButton.tsx","common/validation/passwordValidation.ts","components/login/Login.tsx","components/profile/PersonalInformation.tsx","components/packsList/packsList-reducer.ts","common/Pagination/Pagination.tsx","common/ModalWindow/ModalWindow.tsx","common/ModalWindow/ModalWindowUpdate.tsx","components/packsList/ManagePacksButton.tsx","common/ModalWindow/ModalWindowAdd.tsx","components/packsList/PacksList.tsx","components/profile/Profile.tsx","common/Error404/Error404.tsx","components/enterNewPassword/enter-new-password-reducer.ts","components/enterNewPassword/Enter-new-password.tsx","components/passwordRecovery/password-recovery-reducer.ts","components/passwordRecovery/Password-recovery.tsx","components/registration/regidtration-reducer.ts","components/registration/Registration.tsx","components/navbar/Navbar.tsx","media/password/checkEmail.svg","components/passwordRecovery/ChekEmail.tsx","components/cardsList/cardsList-reducer.ts","components/cardsList/ManageCardsButton.tsx","components/cardsList/CardsList.tsx","App.tsx","reportWebVitals.ts","state/redux-store.ts","index.tsx"],"names":["module","exports","instance","axios","create","withCredentials","baseURL","loginAPI","email","password","rememberMe","post","PasswordRecoveryAPI","from","message","registrationAPI","SetNewPasswordAPI","resetPasswordToken","authAPI","avatar","name","put","delete","PacksListAPI","params","page","max","min","packName","pageCount","user_id","user__id","undefined","get","data","CardsListAPI","cardPack_id","initialStateProfile","profile","_id","publicCardPacksCount","created","updated","isAdmin","verified","loadingRequest","setProfileAC","type","payload","loadingRequestAC","updateProfileAC","initialStateLogin","error","logIn","setServerErrorMessageLogin","AuthUser","dispatch","a","response","InputContainer","props","useState","showPassword","setShowPassword","className","s","emailPasswordContainer","inputTitle","title","typeInput","value","onChange","changeValue","placeholder","onBlur","alt","src","passwordControl","onClick","errorEmailPasswordMessage","errorMessage","emailValidation","test","HeaderEnterApp","logo","Preloader","st","PreloaderContainer","loadingProgress","MainActionButton","blueBtn","actionClick","disabled","loadingStatus","disabledBtnSubmit","PasswordValidation","Login","emailValue","setEmailValue","passwordValue","setPasswordValue","useDispatch","useSelector","state","login","isLogIn","serverErrorMessage","errorEmailMessage","setErrorEmailMessage","errorPasswordMessage","setErrorPasswordMessage","useEffect","to","authPageContainer","emailPasswordLoginContainer","e","currentTarget","forgotPasswordBtn","btnFooterLoginContainer","errorMessageContainer","blueBtnContainer","userData","loginUserTC","DifferentAccountBtn","footerBtn","PersonalInformation","React","memo","registration","isAuth","newName","setNewName","urlAvatar","setUrlAvatar","errorNickName","setErrorNickName","errorUrlAvatar","setErrorUrlAvatar","closeModelWindow","profilePageContainer","modalBackground","modalMessage","modalMessageContainer","inputFields","btns","btnCancel","updatedUser","initialState","cardPacks","packsParams","sortPacks","cardPacksTotalCount","success","GetPacksListAC","packs","setPackNameAC","SetSuccessAC","getPackList","getStore","packsList","Pagination","totalItemsCount","pageSize","currentPage","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","pagination","pagePanel","filter","el","map","p","cn","selectedPage","pageNumber","ModalWindow","showModal","setShowModal","children","finalModal","modalWindow","visibilityWindow","finalBackgroundModal","backgroundModal","modalContainer","closeModalAdd","ModalWindowUpdate","packNameTitle","setPackNameTitle","setError","target","addModalAdd","trimmedPackName","trim","cardsPack","packId","getState","ManagePacksButton","showModalUpdate","setShowModalUpdate","deletePackFun","ModalWindowAdd","gradeTitle","setGradeTitle","ratingTitle","setRatingTitle","checkedPrivate","setCheckedPrivate","Number","toString","grade","rating","private","PacksList","idUser","searchTitle","setSearchTitle","showModalAdd","setShowModalAdd","onPageChangedHandler","useCallback","setPageNumberAC","getPrivatePacks","pack_id","id","flex","checked","search","containerInputSearch","trimmedSearch","table","tableRow","tableHeader","pack","tableCol","cardsCount","user_name","activeClassName","activeLink","Profile","editModeProfile","setEditModeProfile","profileContainer","profileAboutYou","btnEdit","btnLogout","console","log","numberOfCards","profilePacksList","Error404","pageNotFound","initialStateSetNewPassword","setServerErrorMessage","setLoading","setSuccess","EnterNewPassword","setPassword","token","useParams","newPassword","successResponse","containerNewPassword","event","textAction","positionActionBtn","setNewPasswordThunk","initialStatePasswordRecovery","setLoadingRequest","setServerErrorMessageRecovery","PasswordRecovery","setEmail","forgotPasswordContainer","passwordRecoveryThunk","initialStateRegistration","isRegistration","setRegistrationAC","setServerErrorMessageRegistration","Registration","checkPassword","setCheckPassword","registrationContainer","positionBtnsAndError","window","history","go","setRegistration","Navbar","nav","item","active","CheckEmail","containerCheckEmail","headerCheckEmail","imageCheckEmail","checkEmail","titleCheckEmail","textActionCheckEmail","arrayCard","GetCardsListAC","ManageCardsButton","deleteCardFun","CardsList","cardsList","cards","card","cardsPack_id","question","answer","App","exact","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","cl","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9c9dafa7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"authPageContainer\":\"Login_authPageContainer__7C1QJ\",\"emailPasswordLoginContainer\":\"Login_emailPasswordLoginContainer__MqIED\",\"forgotPasswordBtn\":\"Login_forgotPasswordBtn__rr-EP\",\"btnFooterLoginContainer\":\"Login_btnFooterLoginContainer__3dneJ\",\"errorMessageContainer\":\"Login_errorMessageContainer__LW1_P\",\"DifferentAccountBtn\":\"Login_DifferentAccountBtn__2K4Xd\",\"footerBtn\":\"Login_footerBtn__3K4Ft\",\"blueBtnContainer\":\"Login_blueBtnContainer__2-K3N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3Kv36\",\"item\":\"Navbar_item__3hKC0\",\"activeLink\":\"Navbar_activeLink__1TxRS\",\"tab_friend\":\"Navbar_tab_friend__3FlC7\",\"title_friend\":\"Navbar_title_friend__1nGcW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"CardsList_table__2gK7p\",\"tableHeader\":\"CardsList_tableHeader__18Ptv\",\"tableRow\":\"CardsList_tableRow__2Bin1\",\"tableCol\":\"CardsList_tableCol__1U1Cj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forgotPasswordContainer\":\"Password-recovery_forgotPasswordContainer__x4oPS\",\"textAction\":\"Password-recovery_textAction__35_6h\",\"containerCheckEmail\":\"Password-recovery_containerCheckEmail__1Caql\",\"headerCheckEmail\":\"Password-recovery_headerCheckEmail__K4sWA\",\"imageCheckEmail\":\"Password-recovery_imageCheckEmail__TAyIY\",\"titleCheckEmail\":\"Password-recovery_titleCheckEmail__Pd5dQ\",\"textActionCheckEmail\":\"Password-recovery_textActionCheckEmail__3sQyN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profilePageContainer\":\"PersonalInformation_profilePageContainer__3GbTD\",\"modalBackground\":\"PersonalInformation_modalBackground__1JFUL\",\"modalMessage\":\"PersonalInformation_modalMessage__2Unvo\",\"btns\":\"PersonalInformation_btns__2LlOF\",\"btnCancel\":\"PersonalInformation_btnCancel__2wKZw\",\"blueBtnContainer\":\"PersonalInformation_blueBtnContainer__2krBu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalContainer\":\"ModalWindow_modalContainer__3Jl5P\",\"backgroundModal\":\"ModalWindow_backgroundModal__1Fxze\",\"modalWindow\":\"ModalWindow_modalWindow__1x-nM\",\"closeModalAdd\":\"ModalWindow_closeModalAdd__iQhqj\",\"visibilityWindow\":\"ModalWindow_visibilityWindow__1d1wh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profilePageContainer\":\"Profile_profilePageContainer__1AM3i\",\"profileContainer\":\"Profile_profileContainer__hCNw-\",\"profileAboutYou\":\"Profile_profileAboutYou__1sZg0\",\"btnEdit\":\"Profile_btnEdit__ido2p\",\"profilePacksList\":\"Profile_profilePacksList__3wkRt\",\"btnLogout\":\"Profile_btnLogout__316Ra\",\"packsListContainer\":\"Profile_packsListContainer__35ZLG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registrationContainer\":\"Registration_registrationContainer__jEDyv\",\"inputFields\":\"Registration_inputFields__3Wufd\",\"passwordControl\":\"Registration_passwordControl__JLqI2\",\"btns\":\"Registration_btns__1MlwU\",\"positionBtnsAndError\":\"Registration_positionBtnsAndError__hLX2A\",\"errorMessageContainer\":\"Registration_errorMessageContainer__-CyfV\",\"blueBtnContainer\":\"Registration_blueBtnContainer__fALKH\",\"btnCancel\":\"Registration_btnCancel__2vLbb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerNewPassword\":\"Enter-new-password_containerNewPassword__3VqDR\",\"textAction\":\"Enter-new-password_textAction__38ZcY\",\"blueBtnContainer\":\"Enter-new-password_blueBtnContainer__3WKEd\",\"errorMessageContainer\":\"Enter-new-password_errorMessageContainer__2Dt8x\",\"positionActionBtn\":\"Enter-new-password_positionActionBtn__mEw9-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"emailPasswordContainer\":\"InputContainer_emailPasswordContainer__2Yom4\",\"inputTitle\":\"InputContainer_inputTitle__VVoMu\",\"errorEmailPasswordMessage\":\"InputContainer_errorEmailPasswordMessage__28n_1\",\"passwordControl\":\"InputContainer_passwordControl__2xCTJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"Pagination_pagination__2LP57\",\"pagePanel\":\"Pagination_pagePanel__1i9Pk\",\"pageNumber\":\"Pagination_pageNumber__19h66\",\"selectedPage\":\"Pagination_selectedPage__3VegY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"HeaderEnterApp_logo__3H0Pm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blueBtn\":\"MainActionButton_blueBtn__Szl8n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PreloaderContainer\":\"Preloader_PreloaderContainer__1EKqp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageNotFound\":\"Error404_pageNotFound__1Maqm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"flex\":\"PacksList_flex__2v9xF\",\"private\":\"PacksList_private__2aFgR\",\"search\":\"PacksList_search__1JaeK\",\"table\":\"PacksList_table__2SKSJ\",\"tableHeader\":\"PacksList_tableHeader__2b1Li\",\"tableRow\":\"PacksList_tableRow__S5k_B\",\"tableCol\":\"PacksList_tableCol__oeYFO\",\"containerInputSearch\":\"PacksList_containerInputSearch__3NZUf\",\"modalContainer\":\"PacksList_modalContainer__3orWM\",\"backgroundModal\":\"PacksList_backgroundModal__8cnQk\",\"modalWindowAdd\":\"PacksList_modalWindowAdd__3NSmA\",\"closeModalAdd\":\"PacksList_closeModalAdd__ck8c5\",\"addModalAdd\":\"PacksList_addModalAdd__31sJe\",\"visibilityWindow\":\"PacksList_visibilityWindow__1ncq-\"};","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/'\r\n})\r\n\r\n\r\n//API\r\nexport const loginAPI = {\r\n    logIn(email: string, password: string, rememberMe: boolean = false) {\r\n        return instance.post<loginResponseType>('auth/login', {email, password, rememberMe})\r\n    }\r\n}\r\nexport const PasswordRecoveryAPI = {\r\n    forgot(email: string) {\r\n        return instance.post<PasswordRecoveryDataType>('/auth/forgot', {\r\n            email,\r\n            from: \"test-front-admin <ai73a@yandex.by>\",\r\n            message: `<div style=\"background-color: lime; padding: 15px\">password recovery link: \r\n                        <a href='https://IvanStupchyk.github.io/learning-cards#/new-password/$token$'>link</a></div>`\r\n        })\r\n    }\r\n}\r\nexport const registrationAPI = {\r\n    register(email: string, password: string) {\r\n        return instance.post<registrationResponseType>('auth/register', {email, password})\r\n    }\r\n}\r\nexport const SetNewPasswordAPI = {\r\n    setNewPassword(password: string, resetPasswordToken: string) {\r\n        return instance.post<SetNewPasswordDataType>(\"/auth/set-new-password\", {\r\n            password,\r\n            resetPasswordToken,\r\n        })\r\n    }\r\n}\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.post<loginResponseType>('auth/me', {})\r\n    },\r\n    updateProfile(avatar: string, name: string) {\r\n        return instance.put<profileResponseType>('auth/me', {avatar, name})\r\n    },\r\n    logOut() {\r\n        return instance.delete<logOutType>('auth/me')\r\n    }\r\n}\r\nexport const PacksListAPI = {\r\n    getPacks(params: getPacksAPIParamsType) {\r\n        const {page,max,min,packName,pageCount,user_id} = params\r\n        const user__id = user_id !== undefined ? `&user_id=${user_id}` : ''\r\n        return instance.get<resultGetPacksAPIType>(`cards/pack?page=${page}&pageCount=${pageCount}&packName=${packName}&min=${min}&max=${max}${user__id}`)\r\n    },\r\n    addCardsPack(data: addCardsPackDataType) {\r\n        return instance.post<Array<cardsPackType>>('/cards/pack', data)\r\n    },\r\n    deleteCardsPack(params: { id: string }) {\r\n        return instance.delete<Array<cardsPackType>>('/cards/pack', {params})\r\n    },\r\n    changeCardsPack(data: { cardsPack:{ _id: string, name?: string } }) {\r\n        return instance.put<Array<cardsPackType>>('/cards/pack', data)\r\n    },\r\n}\r\nexport const CardsListAPI = {\r\n    getCards(params: getCardsAPIParamsType) {\r\n        return instance.get<resultGetCardsAPIType>(`/cards/card?cardsPack_id=${params.cardPack_id}`\r\n            + \"&pageCount=50\")\r\n    },\r\n    addCard(data: addCardDataType) {\r\n        return instance.post<Array<cardType>>('/cards/card', data)\r\n    },\r\n    deleteCard(params: { id: string }) {\r\n        return instance.delete<Array<cardType>>('/cards/card', {params})\r\n    },\r\n    changeCard(data: { card: { _id: string, question?: string, answer?: string, comments?: string } }) {\r\n        return instance.put<Array<cardType>>('/cards/card', data)\r\n    },\r\n}\r\n\r\n//TYPES=====\r\n\r\n//loginAPI\r\nexport type loginResponseType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar: string\r\n    publicCardPacksCount: number\r\n    created: ''\r\n    updated: ''\r\n    isAdmin: boolean\r\n    verified: boolean\r\n    rememberMe: boolean\r\n}\r\n\r\n//profileAPI\r\nexport type profileResponseType={\r\n    updatedUser: loginResponseType\r\n    error?: string\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\n//authAPI\r\ntype logOutType = {\r\n    info: string,\r\n    error: string\r\n}\r\n\r\n//PasswordRecoveryAPI\r\nexport type PasswordRecoveryDataType = {\r\n    error: string;\r\n}\r\n\r\n//SetNewPasswordAPI\r\nexport type SetNewPasswordDataType = {\r\n    info: string\r\n    error: string\r\n}\r\n\r\n//registrationAPI\r\ntype registrationResponseType = {\r\n    addedUser: addedUserType\r\n    error?: string\r\n}\r\ntype addedUserType = {\r\n    _id: string,\r\n    email: string,\r\n    rememberMe: boolean,\r\n    isAdmin: boolean,\r\n    name: string,\r\n    verified: boolean,\r\n    publicCardPacksCount: 0,\r\n    created: string,\r\n    updated: string,\r\n    __v: number\r\n}\r\n\r\n//PacksListAPI\r\ntype cardAndPackType = \"pack\" | \"folder\" | \"card\"\r\nexport type cardsPackType = {\r\n    _id: string\r\n    user_id: string\r\n    user_name: string\r\n    name: string\r\n    path?: string\r\n    cardsCount: number\r\n    grade?: number\r\n    shots?: number\r\n    rating?: number\r\n    type?: cardAndPackType\r\n    created: string\r\n    updated: string\r\n    __v?: number\r\n}\r\nexport type getPacksAPIParamsType = {\r\n    packName?: string\r\n    min?: number\r\n    max?: number\r\n    sortPacks?: string\r\n    page?: number\r\n    pageCount?: number\r\n    user_id?: string\r\n}\r\nexport type resultGetPacksAPIType = {\r\n    cardPacks: Array<cardsPackType>\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n}\r\nexport type addCardsPackDataType = {\r\n    cardsPack: {\r\n        name?: string\r\n        path?: string\r\n        grade?: number\r\n        shots?: number\r\n        rating?: number\r\n        deckCover?: string\r\n        private?: boolean\r\n        type?: string\r\n    }\r\n}\r\n\r\n//CardsListAPI\r\nexport type cardType = {\r\n    answer: string\r\n    question: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    shots: number\r\n    rating?: number\r\n    type?: cardAndPackType\r\n    created: string\r\n    updated: string\r\n    __v?: number\r\n    _id: string\r\n}\r\nexport type getCardsAPIParamsType = {\r\n    cardAnswer?: string\r\n    cardQuestion?: string\r\n    cardPack_id: string\r\n    min?: number\r\n    max?: number\r\n    sortCards?: string\r\n    page?: number\r\n    pageCount?: number\r\n}\r\nexport type resultGetCardsAPIType = {\r\n    cards: Array<cardType>\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n    packUserId: string\r\n}\r\nexport type addCardDataType = {\r\n    card: {\r\n        cardsPack_id: string\r\n        question?: string\r\n        answer?: string\r\n        grade?: number\r\n        shots?: number\r\n        rating?: number\r\n        answerImg?: string\r\n        questionImg?: string\r\n        questionVideo?: string\r\n        type?: cardAndPackType\r\n    }\r\n}\r\n","import {AppThunkType} from \"../../state/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../../api/api\";\r\n\r\nconst initialStateProfile = {\r\n    profile: {\r\n        _id: '',\r\n        email: '',\r\n        name: '',\r\n        avatar: '',\r\n        publicCardPacksCount: 0,\r\n        created: '',\r\n        updated: '',\r\n        isAdmin: false,\r\n        verified: false,\r\n        rememberMe: false,\r\n    } as profileResponseType,\r\n    loadingRequest: false\r\n}\r\n\r\nexport const profileReducer = (state: initialProfileType = initialStateProfile, action: actionsProfileType) => {\r\n    switch (action.type) {\r\n        case 'PROFILE/SET_PROFILE_DATA': {\r\n            return {...state, ...action.payload}\r\n        }\r\n        case 'PROFILE/LOADING-REQUEST':\r\n            return {...state, ...action.payload}\r\n        case 'PROFILE/UPDATE-PROFILE':\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, ...action.payload}\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actionC\r\nexport const setProfileAC = (profile: profileResponseType) => {\r\n    return {\r\n        type: \"PROFILE/SET_PROFILE_DATA\",\r\n        payload: {profile}\r\n    } as const\r\n}\r\nconst loadingRequestAC = (loadingRequest: boolean) => {\r\n    return {\r\n        type: 'PROFILE/LOADING-REQUEST',\r\n        payload: {loadingRequest}\r\n    } as const\r\n}\r\nexport const updateProfileAC = (avatar: string, name: string) => ({\r\n    type: 'PROFILE/UPDATE-PROFILE',\r\n    payload: {avatar, name}\r\n} as const)\r\n\r\n\r\n//thunkC\r\nexport const updateProfile = (avatar: string, name: string): AppThunkType => async (dispatch: Dispatch<actionsProfileType>) => {\r\n    dispatch(loadingRequestAC(true))\r\n    try {\r\n        const response = await authAPI.updateProfile(avatar, name)\r\n        debugger\r\n        dispatch(updateProfileAC(response.data.updatedUser.avatar, response.data.updatedUser.name))\r\n    } catch (e) {\r\n        /*const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(setServerErrorMessageRegistration(error))*/\r\n    } finally {\r\n        dispatch(loadingRequestAC(false))\r\n    }\r\n}\r\n\r\nexport const setProfile = (): AppThunkType => async (dispatch: Dispatch<actionsProfileType>) => {\r\n    try {\r\n        const response = await authAPI.me()\r\n        dispatch(setProfileAC(response.data))\r\n    } catch (e) {\r\n    }\r\n}\r\n\r\n//types\r\ntype initialProfileType = typeof initialStateProfile\r\n\r\nexport type actionsProfileType =\r\n    | ReturnType<typeof loadingRequestAC>\r\n    | ReturnType<typeof updateProfileAC>\r\n    | ReturnType<typeof setProfileAC>\r\n\r\nexport type profileResponseType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar: string\r\n    publicCardPacksCount: number\r\n    created: string\r\n    updated: string\r\n    isAdmin: boolean\r\n    verified: boolean\r\n    rememberMe: boolean\r\n}\r\n\r\n\r\n\r\n","import {authAPI, loginAPI, loginResponseType} from \"../../api/api\";\r\nimport {AppThunkType} from \"../../state/redux-store\";\r\nimport {setProfileAC} from \"../profile/profile-reducer\";\r\n\r\nconst initialStateLogin: initialLoginType = {\r\n    _id: '',\r\n    email: '',\r\n    name: '',\r\n    avatar: '',\r\n    publicCardPacksCount: 0,\r\n    created: '',\r\n    updated: '',\r\n    isAdmin: false,\r\n    verified: false,\r\n    rememberMe: false,\r\n    error: '',\r\n    loadingRequest: false,\r\n    logIn: false\r\n}\r\n\r\nexport const loginReducer = (state: initialLoginType = initialStateLogin, action: actionsLoginType): initialLoginType => {\r\n    switch (action.type) {\r\n        case 'LOGIN/LOGIN-USER':\r\n            return {...state, ...action.payload}\r\n        case 'LOGIN/SET-ERROR':\r\n            return {...state, ...action.payload}\r\n        case 'LOGIN/LOADING-REQUEST':\r\n            return {...state, ...action.payload}\r\n        case 'LOGIN/LOG-IN':\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actionC\r\nexport const loginUser = (userData: loginResponseType) => {\r\n    return {\r\n        type: 'LOGIN/LOGIN-USER',\r\n        payload: {...userData}\r\n    } as const\r\n}\r\nconst loadingRequest = (loadingRequest: boolean) => {\r\n    return {\r\n        type: 'LOGIN/LOADING-REQUEST',\r\n        payload: {loadingRequest}\r\n    } as const\r\n}\r\nexport const logIn = (logIn: boolean) => {\r\n    return {\r\n        type: 'LOGIN/LOG-IN',\r\n        payload: {logIn}\r\n    } as const\r\n}\r\nexport const setServerErrorMessageLogin = (error: string) => {\r\n    return {\r\n        type: 'LOGIN/SET-ERROR',\r\n        payload: {error}\r\n    } as const\r\n}\r\n\r\n\r\n//thunkC\r\nexport const loginUserTC = (emailValue: string, passwordValue: string): AppThunkType => async (dispatch) => {\r\n    dispatch(loadingRequest(true))\r\n\r\n    try {\r\n        const response = await loginAPI.logIn(emailValue, passwordValue)\r\n        dispatch(loginUser(response.data))\r\n        dispatch(logIn(true))\r\n\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console')\r\n        dispatch(setServerErrorMessageLogin(error))\r\n    } finally {\r\n        dispatch(loadingRequest(false))\r\n    }\r\n}\r\n\r\nexport const AuthUser = (): AppThunkType => async (dispatch) => {\r\n    dispatch(loadingRequest(true))\r\n    try {\r\n        const response = await authAPI.me()\r\n\r\n        dispatch(logIn(true))\r\n        dispatch(setProfileAC(response.data))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console')\r\n        dispatch(setServerErrorMessageLogin(error))\r\n    } finally {\r\n        dispatch(loadingRequest(false))\r\n    }\r\n}\r\n\r\nexport const logOutUser = (): AppThunkType => async (dispatch) => {\r\n    try {\r\n        const response = await authAPI.logOut()\r\n        dispatch(logIn(false))\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\n//types\r\nexport type initialLoginType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar: string\r\n    publicCardPacksCount: number\r\n    created: string\r\n    updated: string\r\n    isAdmin: boolean\r\n    verified: boolean\r\n    rememberMe: boolean\r\n    error: string\r\n    loadingRequest: boolean\r\n    logIn: boolean\r\n}\r\nexport type actionsLoginType = ReturnType<typeof loginUser>\r\n    | ReturnType<typeof loadingRequest>\r\n    | ReturnType<typeof logIn>\r\n    | ReturnType<typeof setServerErrorMessageLogin>","import s from \"./InputContainer.module.scss\";\r\nimport React, {ChangeEvent, FocusEvent, useState} from \"react\";\r\n\r\ntype InputContainerPropsType = {\r\n    title?: string\r\n    value: string\r\n    changeValue: (e: ChangeEvent<HTMLInputElement>) => void,\r\n    errorMessage: string\r\n    typeInput: 'email' | 'password' | 'text'\r\n    placeholder?: string\r\n    onBlur?: (e: FocusEvent<HTMLInputElement>) => void\r\n}\r\nexport const InputContainer = (props: InputContainerPropsType) => {\r\n    const [showPassword, setShowPassword] = useState<boolean>(false)\r\n\r\n    const typeShowInput = () => {\r\n        if (props.typeInput === 'password') {\r\n            return showPassword ? 'text' : 'password'\r\n        }\r\n        return props.typeInput\r\n    }\r\n\r\n    return (\r\n        <label className={s.emailPasswordContainer}>\r\n            <span className={s.inputTitle}>{props.title}</span>\r\n            <input\r\n                type={typeShowInput()}\r\n                value={props.value}\r\n                onChange={props.changeValue}\r\n                placeholder={props.placeholder}\r\n                onBlur={props.onBlur}\r\n            />\r\n            {props.typeInput === 'password'\r\n            &&\r\n            <img alt={'your password'}\r\n                 src={showPassword ? 'https://snipp.ru/demo/495/no-view.svg' : 'https://snipp.ru/demo/495/view.svg'}\r\n                 className={s.passwordControl} onClick={() => {setShowPassword(!showPassword)}}/>\r\n            }\r\n            <span className={s.errorEmailPasswordMessage}>{props.errorMessage}</span>\r\n        </label>\r\n    )\r\n}","export const emailValidation = (value: string) => {\r\n    return /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)\r\n}","import s from \"./HeaderEnterApp.module.scss\";\r\nimport React from \"react\";\r\n\r\ntype HeaderEnterAppType = {\r\n    title?: string\r\n}\r\nexport const HeaderEnterApp = ({title}: HeaderEnterAppType) => {\r\n    return (\r\n        <div>\r\n            <div className={s.logo}>It-incubator</div>\r\n            <h1>{title}</h1>\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/loadingBtn.8c4b4840.svg\";","import React from \"react\";\r\nimport loadingProgress from '../../media/loadings/loadingBtn.svg'\r\nimport st from './Preloader.module.scss'\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div className={st.PreloaderContainer}>\r\n            <img alt={'preloader'} src={loadingProgress} />\r\n        </div>\r\n    )\r\n}","import s from \"./MainActionButton.module.scss\";\r\nimport {Preloader} from \"../Preloader/Preloader\";\r\nimport React from \"react\";\r\n\r\ntype MainActionButton = {\r\n    actionClick: () => void\r\n    loadingStatus?: boolean\r\n    disabledBtnSubmit?: boolean\r\n    title: string\r\n}\r\n\r\nexport const MainActionButton = (props: MainActionButton) => {\r\n    return (\r\n        <button className={s.blueBtn}\r\n                onClick={props.actionClick}\r\n                disabled={props.loadingStatus || props.disabledBtnSubmit}>{props.loadingStatus ? <Preloader/> : props.title}</button>\r\n    )\r\n}","export const PasswordValidation = (value: string) => {\r\n    return /[0-9a-zA-Z!@#$%^&*]{8,}/.test(value)\r\n}","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport s from './Login.module.scss'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setServerErrorMessageLogin, loginUserTC, logIn} from \"./login-reducer\";\r\nimport {AppStateType} from \"../../state/redux-store\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {InputContainer} from \"../../common/InputContainer/InputContainer\";\r\nimport {emailValidation} from \"../../common/validation/EmailValidation\";\r\nimport {HeaderEnterApp} from \"../../common/HeaderEnterApp/HeaderEnterApp\";\r\nimport {MainActionButton} from \"../../common/MainActionButton/MainActionButton\";\r\nimport {PasswordValidation} from \"../../common/validation/passwordValidation\";\r\n\r\nexport const Login = () => {\r\n    const [emailValue, setEmailValue] = useState<string>('')\r\n    const [passwordValue, setPasswordValue] = useState<string>('')\r\n\r\n    const dispatch = useDispatch()\r\n    const loadingStatus = useSelector<AppStateType, boolean>(state => state.login.loadingRequest)\r\n    const isLogIn = useSelector<AppStateType, boolean>(state => state.login.logIn)\r\n    const serverErrorMessage = useSelector<AppStateType, string>(state => state.login.error)\r\n\r\n    const [errorEmailMessage, setErrorEmailMessage] = useState<string>('')\r\n    const [errorPasswordMessage, setErrorPasswordMessage] = useState<string>('')\r\n\r\n    const changeEmailValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmailValue(e.currentTarget.value)\r\n        setErrorEmailMessage('')\r\n        serverErrorMessage && dispatch(setServerErrorMessageLogin(''))\r\n    }\r\n    const changePasswordValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPasswordValue(e.currentTarget.value)\r\n        serverErrorMessage && dispatch(setServerErrorMessageLogin(''))\r\n        setErrorPasswordMessage('')\r\n    }\r\n\r\n    const checkLoginUser = () => {\r\n        if (!emailValidation(emailValue)) {\r\n            setErrorEmailMessage('Incorrect email')\r\n        } else if (!PasswordValidation(passwordValue)) {\r\n            setErrorPasswordMessage('Minimum 8 characters')\r\n        } else {\r\n            dispatch(loginUserTC(emailValue, passwordValue))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(setServerErrorMessageLogin(''))\r\n        }\r\n    }, [])\r\n\r\n\r\n    if (isLogIn) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    const disabledBtnSubmit = !emailValue || !passwordValue\r\n\r\n    return (\r\n        <div className={s.authPageContainer}>\r\n            <HeaderEnterApp title={'Sign In'}/>\r\n\r\n            <div className={s.emailPasswordLoginContainer}>\r\n                <InputContainer\r\n                    title={'Email'}\r\n                    typeInput={'email'}\r\n                    value={emailValue}\r\n                    changeValue={changeEmailValue}\r\n                    errorMessage={errorEmailMessage}\r\n                />\r\n                <InputContainer\r\n                    title={'Password'}\r\n                    typeInput={'password'}\r\n                    value={passwordValue}\r\n                    changeValue={changePasswordValue}\r\n                    errorMessage={errorPasswordMessage}\r\n                />\r\n\r\n                <div className={s.forgotPasswordBtn}>\r\n                    <NavLink to=\"/password-recovery\">Forgot Password</NavLink>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={s.btnFooterLoginContainer}>\r\n                <span className={s.errorMessageContainer}>{serverErrorMessage}</span>\r\n                <div className={s.blueBtnContainer}>\r\n                    <MainActionButton actionClick={checkLoginUser}\r\n                                disabledBtnSubmit={disabledBtnSubmit}\r\n                                loadingStatus={loadingStatus}\r\n                                title={'login'}\r\n                    />\r\n                </div>\r\n                <p className={s.DifferentAccountBtn}>Don't have an account</p>\r\n                <NavLink to=\"/registration\" className={s.footerBtn}>Sing Up</NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../state/redux-store\";\r\nimport s from \"./PersonalInformation.module.scss\";\r\nimport {MainActionButton} from \"../../common/MainActionButton/MainActionButton\";\r\nimport {updateProfile} from \"./profile-reducer\";\r\nimport {InputContainer} from \"../../common/InputContainer/InputContainer\";\r\n\r\ntype PersonalInformationPropsType = {\r\n    onClick: () => void\r\n    avatar: string\r\n    name: string\r\n}\r\n\r\nexport const PersonalInformation = React.memo((props: PersonalInformationPropsType) => {\r\n    const loadingStatus = useSelector<AppStateType, boolean>(state => state.registration.loadingRequest)\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.login.logIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const [newName, setNewName] = useState<string>(props.name)\r\n    const [urlAvatar, setUrlAvatar] = useState<string>(props.avatar)\r\n    const [errorNickName, setErrorNickName] = useState<string>('')\r\n    const [errorUrlAvatar, setErrorUrlAvatar] = useState<string>('')\r\n\r\n    const onChangeName = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewName(e.currentTarget.value)\r\n    }\r\n\r\n    const onChangeAvatar = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setUrlAvatar(e.currentTarget.value)\r\n    }\r\n\r\n    const closeModelWindow = () => {\r\n        props.onClick()\r\n    }\r\n\r\n    const disabledBtnSubmit = !newName || !urlAvatar\r\n\r\n    const onSaveInformation = () => {\r\n        debugger\r\n        if (!newName) {\r\n            setErrorNickName('Incorrect nick name')\r\n        } else if (!urlAvatar) {\r\n            setErrorUrlAvatar('Incorrect url address')\r\n        } else {\r\n            dispatch(updateProfile(urlAvatar, newName));\r\n            closeModelWindow();\r\n        }\r\n    }\r\n\r\n    if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <div className={s.profilePageContainer}>\r\n            <>\r\n                <div className={s.modalBackground} onClick={closeModelWindow}>\r\n                </div>\r\n                <div className={s.modalMessage}>\r\n                    <div className={s.modalMessageContainer}>\r\n                        <h2>Personal information</h2>\r\n                        <img src={urlAvatar && urlAvatar ? urlAvatar : ''} alt=\"user_photo\"/>\r\n                        <div className={s.inputFields}>\r\n                            <InputContainer\r\n                                title={'Nick name'}\r\n                                typeInput={'text'}\r\n                                value={newName}\r\n                                changeValue={onChangeName}\r\n                                errorMessage={errorNickName}\r\n                            />\r\n                            <InputContainer\r\n                                title={'URL photo'}\r\n                                typeInput={'text'}\r\n                                value={urlAvatar}\r\n                                changeValue={onChangeAvatar}\r\n                                errorMessage={errorUrlAvatar}\r\n                            />\r\n                        </div>\r\n                        <div className={s.btns}>\r\n                            <a className={s.btnCancel} onClick={closeModelWindow}>Cancel</a>\r\n                            <div className={s.blueBtnContainer}>\r\n                                <MainActionButton\r\n                                    actionClick={onSaveInformation}\r\n                                    disabledBtnSubmit={disabledBtnSubmit}\r\n                                    title={'Save'}\r\n                                    loadingStatus={loadingStatus}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        </div>\r\n    )\r\n})","import {\r\n    addCardsPackDataType,\r\n    cardsPackType,\r\n    getPacksAPIParamsType,\r\n    PacksListAPI,\r\n} from \"../../api/api\";\r\nimport {AppThunkType, GetAppStateType} from \"../../state/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype InitialStateType = {\r\n    cardPacks:cardsPackType[]\r\n    packsParams:getPacksAPIParamsType\r\n    cardPacksTotalCount: number\r\n    success: boolean\r\n}\r\n\r\nexport const initialState: InitialStateType = {\r\n    cardPacks: [] as cardsPackType[],\r\n    packsParams: {\r\n        min: 0,\r\n        max: 20,\r\n        page: 1,\r\n        pageCount: 15,\r\n        sortPacks: '0updated',\r\n        packName: ''\r\n    },\r\n    cardPacksTotalCount: 0,\r\n    success: false,\r\n}\r\n\r\n//types\r\ntype GetPacksListAT = ReturnType<typeof GetPacksListAC>\r\ntype setPageNumber = ReturnType<typeof setPageNumberAC>\r\ntype setTotalPacksCountAC = ReturnType<typeof setTotalPacksCountAC>\r\ntype setPageCountAC = ReturnType<typeof setPageCountAC>\r\ntype setPackNameAT = ReturnType<typeof setPackNameAC>\r\ntype SetSuccessAT = ReturnType<typeof SetSuccessAC>\r\n// type AddPackAT = ReturnType<typeof AddPackAC>\r\n\r\nexport type actionPacksListType = GetPacksListAT | SetSuccessAT | setPageNumber | setTotalPacksCountAC | setPackNameAT | setPageCountAC\r\n\r\n//actionC\r\nexport const GetPacksListAC = (packs: Array<cardsPackType>) => ({type: 'packList/GET-PACKSLIST', packs} as const)\r\nexport const setPageNumberAC =  (page:number) => ({type:'packList/SET-PAGE-NUMBER' , page} as const)\r\nexport const setTotalPacksCountAC = (cardPacksTotalCount: number)  => ({type: 'packList/SET-PACKS-TOTAL-COUNT', cardPacksTotalCount} as const)\r\nexport const setPageCountAC = (pageCount: number) => ({type: `packList/SET-PAGE-COUNT`, pageCount} as const)\r\nexport const setPackNameAC = (packName: string) => ({type: `packList/SET-PACK-NAME`, packName} as const)\r\nexport const SetSuccessAC = (success: boolean) => ({type: 'packList/SET-SUCCESS', success} as const)\r\n\r\n\r\n//export const AddPackAC = (payload: addCardsPackDataType) => ({type: \"packList/ADD-PACK\", payload} as const)\r\n\r\nexport const packsListReducer = (state = initialState, action: actionPacksListType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"packList/GET-PACKSLIST\":\r\n            return ({\r\n                ...state,\r\n                cardPacks:action.packs\r\n            })\r\n        case 'packList/SET-PAGE-NUMBER': {\r\n            return ({\r\n                ...state,\r\n                packsParams: {...state.packsParams, page: action.page}\r\n            })\r\n        }\r\n        case 'packList/SET-PACKS-TOTAL-COUNT': {\r\n            return ({\r\n                ...state,\r\n                cardPacksTotalCount: action.cardPacksTotalCount\r\n            })\r\n        }\r\n        case 'packList/SET-PAGE-COUNT': {\r\n            return ({\r\n                ...state,\r\n                packsParams: {...state.packsParams, pageCount: action.pageCount}\r\n            })\r\n        }\r\n        case \"packList/SET-PACK-NAME\": {\r\n            return ({\r\n                ...state,\r\n                packsParams: {...state.packsParams, packName: action.packName}\r\n            })\r\n        }\r\n        case \"packList/SET-SUCCESS\":\r\n            return {...state, success: action.success}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//thunkC\r\nexport const getPackList = (params: getPacksAPIParamsType): AppThunkType => async (dispatch: Dispatch<actionPacksListType>, getStore: GetAppStateType) => {\r\n    const {page} = getStore().packsList.packsParams\r\n    try {\r\n        const response = await PacksListAPI.getPacks({...params,page})\r\n        dispatch(GetPacksListAC(response.data.cardPacks))\r\n        dispatch(setTotalPacksCountAC(response.data.cardPacksTotalCount))\r\n        dispatch(SetSuccessAC(true))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(SetSuccessAC(false))\r\n    } finally {\r\n    }\r\n}\r\n\r\nexport const addPack = (data: addCardsPackDataType): AppThunkType => async (dispatch: Dispatch<actionPacksListType>,getState:GetAppStateType) => {\r\n    const {sortPacks, min, max, page, user_id, pageCount, packName} = getState().packsList.packsParams\r\n    try {\r\n        const responseAdd = await PacksListAPI.addCardsPack(data)\r\n        const response = await PacksListAPI.getPacks({pageCount, user_id, page, max, min, sortPacks, packName})\r\n        dispatch(GetPacksListAC(response.data.cardPacks))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n    } finally {\r\n    }\r\n}\r\n\r\nexport const deletePack = (params: {id: string}): AppThunkType => async (dispatch: Dispatch<actionPacksListType>,getState:GetAppStateType) => {\r\n    const {sortPacks, min, max, page, pageCount, packName} = getState().packsList.packsParams\r\n    const _id = getState().profile.profile._id\r\n    try {\r\n        const responseDelete = await PacksListAPI.deleteCardsPack(params)\r\n        const response = await PacksListAPI.getPacks({pageCount, user_id: _id, page, max, min, sortPacks, packName})\r\n        dispatch(GetPacksListAC(response.data.cardPacks))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n    } finally {\r\n    }\r\n}\r\n\r\nexport const updatePack = (data: { cardsPack: { _id: string, name?: string } }): AppThunkType => async (dispatch: Dispatch<actionPacksListType>,getState:GetAppStateType) => {\r\n    const {sortPacks, min, max, page, user_id, pageCount, packName} = getState().packsList.packsParams\r\n    const _id = getState().profile.profile._id\r\n    try {\r\n        const responseUpdate = await PacksListAPI.changeCardsPack(data)\r\n        const response = await PacksListAPI.getPacks({pageCount, user_id, page, max, min, sortPacks, packName})\r\n        dispatch(GetPacksListAC(response.data.cardPacks))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n    } finally {\r\n    }\r\n}\r\n","import React, {useState} from 'react';\r\nimport styles from './Pagination.module.scss';\r\nimport cn from 'classnames';\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\nexport const Pagination: React.FC<PropsType> = ({totalItemsCount, pageSize, currentPage, onPageChanged, portionSize = 10}) => {\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n    let pages: number[] = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return (<div className={styles.pagination}>\r\n\r\n\r\n        <div className={styles.pagePanel}>\r\n            {portionNumber > 1 &&\r\n            <button onClick={ () => { setPortionNumber(portionNumber - 1) } }\r\n            >Previous\r\n            </button>}\r\n\r\n            {pages\r\n                .filter(el => (el >= leftPortionPageNumber && el <= rightPortionPageNumber))\r\n                .map(p => {\r\n                    return <span className={ cn({[styles.selectedPage]: currentPage === p}, styles.pageNumber) }\r\n                                 onClick={() => {onPageChanged(p)}}\r\n                                 key={p}\r\n                    >\r\n                        {p}\r\n                    </span>\r\n                })\r\n            }\r\n            {portionCount > portionNumber &&\r\n            <button onClick={() => { setPortionNumber(portionNumber + 1) }}>Next</button>\r\n            }\r\n        </div>\r\n\r\n    </div>)\r\n}\r\n","import React, {DetailedHTMLProps, HTMLAttributes} from \"react\";\r\nimport s from \"./ModalWindow.module.scss\";\r\nimport {ModalWindowPropsType} from \"./ModalWindowAdd\";\r\n\r\ntype DefaultDivPropsType = DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>\r\n\r\ntype CommonModalWindowPropsType = DefaultDivPropsType & ModalWindowPropsType\r\n\r\nexport const ModalWindow: React.FC<ModalWindowPropsType> = ({showModal, setShowModal, children}) => {\r\n    const finalModal = showModal ? `${s.modalWindow} ${s.visibilityWindow}` : `${s.modalWindow}`\r\n    const finalBackgroundModal = showModal ? `${s.backgroundModal} ${s.visibilityWindow}` : `${s.backgroundModal}`\r\n\r\n    return (\r\n        <div className={s.modalContainer}>\r\n            <div className={finalBackgroundModal} onClick={() => setShowModal(false)}></div>\r\n            <div className={finalModal}>\r\n                <button className={s.closeModalAdd} onClick={() => setShowModal(false)}>X</button>\r\n                {children}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {ModalWindow} from \"./ModalWindow\";\r\nimport {InputContainer} from \"../InputContainer/InputContainer\";\r\nimport s from \"../../components/packsList/PacksList.module.scss\";\r\nimport {MainActionButton} from \"../MainActionButton/MainActionButton\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\nimport {addPack, updatePack} from \"../../components/packsList/packsList-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nexport type ModalWindowPropsType = {\r\n    packId: string\r\n    showModal: boolean\r\n    setShowModal: (showModal: boolean) => void\r\n}\r\n\r\nexport const ModalWindowUpdate: React.FC<ModalWindowPropsType> = (props) => {\r\n    const [packNameTitle, setPackNameTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n    const dispatch = useDispatch();\r\n\r\n    const changePackName = (e: ChangeEvent<HTMLInputElement>) => {\r\n        error && setError(null)\r\n        setPackNameTitle(e.target.value)\r\n    }\r\n\r\n    const updatePackFun = () => {\r\n        const trimmedPackName = packNameTitle.trim()\r\n        if (trimmedPackName) {\r\n            dispatch(updatePack({cardsPack:{_id: props.packId, name: trimmedPackName}}))\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n        setPackNameTitle(\"\")\r\n        props.setShowModal(false)\r\n    }\r\n\r\n    return <ModalWindow showModal={props.showModal} setShowModal={props.setShowModal}>\r\n        <InputContainer\r\n            placeholder={\"New pack name\"}\r\n            changeValue={changePackName}\r\n            errorMessage={\"\"}\r\n            typeInput={\"text\"}\r\n            value={packNameTitle}\r\n        />\r\n        <div className={s.addModalAdd}>\r\n            <MainActionButton actionClick={updatePackFun}\r\n                              title={\"UPDATE\"}\r\n            />\r\n        </div>\r\n    </ModalWindow>;\r\n}","import React, {useState} from \"react\";\r\nimport {MainActionButton} from \"../../common/MainActionButton/MainActionButton\";\r\nimport {ModalWindowUpdate} from \"../../common/ModalWindow/ModalWindowUpdate\";\r\n\r\ntype ManageButtonPropsType = {\r\n    _id: string\r\n    deletePackFun: (id: string) => void\r\n}\r\n\r\nexport const ManagePacksButton: React.FC<ManageButtonPropsType> = (props) => {\r\n    const [showModalUpdate, setShowModalUpdate] = useState<boolean>(false)\r\n\r\n    const updatePack = () => {\r\n        setShowModalUpdate(true)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <td>\r\n                <MainActionButton actionClick={() => props.deletePackFun(props._id)}\r\n                                  title={\"DELETE\"}/>\r\n            </td>\r\n            <td>\r\n                <MainActionButton actionClick={updatePack}\r\n                                  title={\"UPDATE\"}/>\r\n            </td>\r\n            <ModalWindowUpdate packId={props._id} showModal={showModalUpdate} setShowModal={setShowModalUpdate} />\r\n        </>\r\n    )\r\n}","import {ModalWindow} from \"./ModalWindow\";\r\nimport {InputContainer} from \"../InputContainer/InputContainer\";\r\nimport s from \"../../components/packsList/PacksList.module.scss\";\r\nimport {MainActionButton} from \"../MainActionButton/MainActionButton\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\nimport {addPack} from \"../../components/packsList/packsList-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nexport type ModalWindowPropsType = {\r\n    showModal: boolean\r\n    setShowModal: (showModal: boolean) => void\r\n}\r\n\r\nexport const ModalWindowAdd: React.FC<ModalWindowPropsType> = (props) => {\r\n    const [packNameTitle, setPackNameTitle] = useState<string>(\"\")\r\n    const [gradeTitle, setGradeTitle] = useState<number>(0)\r\n    const [ratingTitle, setRatingTitle] = useState<number>(0)\r\n    const [checkedPrivate, setCheckedPrivate] = useState<boolean>(false)\r\n    const [error, setError] = useState<string | null>(null)\r\n    const dispatch = useDispatch();\r\n\r\n    const changePackName = (e: ChangeEvent<HTMLInputElement>) => {\r\n        error && setError(null)\r\n        setPackNameTitle(e.target.value)\r\n    }\r\n    const changeGrade = (e: ChangeEvent<HTMLInputElement>) => {\r\n        error && setError(null)\r\n        if (Number(e.target.value) > 5 || Number(e.target.value) < 0) {\r\n            setError('Enter a value between 0 and 5')\r\n        } else {\r\n            setGradeTitle(Number(e.target.value))\r\n        }\r\n    }\r\n    const changeRating = (e: ChangeEvent<HTMLInputElement>) => {\r\n        error && setError(null)\r\n        if (Number(e.target.value) > 5 || Number(e.target.value) < 0) {\r\n            setError('Enter a value between 0 and 5')\r\n        } else {\r\n            setRatingTitle(Number(e.target.value))\r\n        }\r\n    }\r\n\r\n    const addPackFun = () => {\r\n        const trimmedPackName = packNameTitle.trim()\r\n        if (trimmedPackName) {\r\n            setCheckedPrivate(false)\r\n            dispatch(addPack({cardsPack: {name: trimmedPackName, grade: gradeTitle, rating: ratingTitle, private: checkedPrivate}}))\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n        setPackNameTitle(\"\")\r\n        setGradeTitle(0)\r\n        setRatingTitle(0)\r\n        props.setShowModal(false)\r\n    }\r\n\r\n    return <ModalWindow showModal={props.showModal} setShowModal={props.setShowModal}>\r\n        <InputContainer\r\n            placeholder={\"Pack name\"}\r\n            changeValue={changePackName}\r\n            errorMessage={\"\"}\r\n            typeInput={\"text\"}\r\n            value={packNameTitle}\r\n        />\r\n        <InputContainer\r\n            placeholder={\"Grade\"}\r\n            changeValue={changeGrade}\r\n            errorMessage={\"\"}\r\n            typeInput={\"text\"}\r\n            value={gradeTitle.toString()}\r\n        />\r\n        <InputContainer\r\n            placeholder={\"Rating\"}\r\n            changeValue={changeRating}\r\n            errorMessage={\"\"}\r\n            typeInput={\"text\"}\r\n            value={ratingTitle.toString()}\r\n        />\r\n        <div className={s.addModalAdd}>\r\n            <MainActionButton actionClick={addPackFun}\r\n                              title={\"ADD\"}/>\r\n        </div>\r\n    </ModalWindow>;\r\n}","import s from './PacksList.module.scss'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport React, {ChangeEvent, useCallback, useEffect, useState} from \"react\";\r\nimport {addPack, deletePack, getPackList, setPackNameAC, setPageNumberAC, updatePack} from \"./packsList-reducer\";\r\nimport {AppStateType} from \"../../state/redux-store\";\r\nimport {cardsPackType, getPacksAPIParamsType} from \"../../api/api\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {AuthUser} from \"../login/login-reducer\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {Pagination} from \"../../common/Pagination/Pagination\";\r\nimport {ManagePacksButton} from './ManagePacksButton';\r\nimport {InputContainer} from \"../../common/InputContainer/InputContainer\";\r\nimport {ModalWindowAdd} from \"../../common/ModalWindow/ModalWindowAdd\";\r\nimport {ModalWindowUpdate} from \"../../common/ModalWindow/ModalWindowUpdate\";\r\nimport {MainActionButton} from \"../../common/MainActionButton/MainActionButton\";\r\n\r\nexport const PacksList = (props: { user_id?: string }) => {\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.login.logIn)\r\n    const idUser = useSelector<AppStateType, string>(state => state.profile.profile._id)\r\n    const success = useSelector<AppStateType, boolean>(state => state.packsList.success)\r\n    const loadingRequest = useSelector<AppStateType, boolean>(state => state.login.loadingRequest)\r\n    const [searchTitle, setSearchTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n    const [showModalAdd, setShowModalAdd] = useState<boolean>(false)\r\n    const [showModalUpdate, setShowModalUpdate] = useState<boolean>(false)\r\n    const dispatch = useDispatch();\r\n\r\n    const {\r\n        page = 1, pageCount = 10, min = 0, max = 10, packName, sortPacks\r\n    } = useSelector<AppStateType, getPacksAPIParamsType>(state => state.packsList.packsParams);\r\n\r\n    const cardPacksTotalCount = useSelector<AppStateType, number>(state => state.packsList.cardPacksTotalCount);\r\n\r\n    const packsList = useSelector<AppStateType, Array<cardsPackType>>(state => state.packsList.cardPacks)\r\n\r\n    const onPageChangedHandler = useCallback((currentPage: number): void => {\r\n        dispatch(setPageNumberAC(currentPage))\r\n    }, [page])\r\n\r\n    useEffect(() => {\r\n        if (!idUser) {\r\n            if (!loadingRequest) {\r\n                dispatch(AuthUser())\r\n            }\r\n        } else {\r\n            getPrivatePacks()\r\n        }\r\n    }, [dispatch, page, pageCount, sortPacks, min, max, packName])\r\n\r\n    const changeSearch = (e: ChangeEvent<HTMLInputElement>) => {\r\n        error && setError(null)\r\n        setSearchTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const setSearch = () => {\r\n        const trimmedSearch = searchTitle.trim()\r\n        if (trimmedSearch) {\r\n            dispatch(setPackNameAC(trimmedSearch))\r\n            getPrivatePacks()\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n        setSearchTitle(\"\")\r\n    }\r\n\r\n    const deletePackFun = (pack_id: string) => {\r\n        dispatch(deletePack({id: pack_id}))\r\n    }\r\n\r\n    const getPrivatePacks = () => {\r\n        if (props.user_id) {\r\n            dispatch(getPackList({pageCount, min, max, page, packName, user_id: props.user_id}))\r\n        } else {\r\n            dispatch(getPackList({pageCount, min, max, page, packName}))\r\n        }\r\n    }\r\n\r\n    if (!isAuth) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    if (!success) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={s.flex}>\r\n                {props.user_id && <div className={s.private}>\r\n                    <input type=\"checkbox\" className=\"toggle_input\" onChange={getPrivatePacks}\r\n                           checked={false}/>\r\n                    <label>private</label>\r\n                </div>}\r\n                <div className={s.search}>\r\n                    <div className={s.containerInputSearch}>\r\n                        <InputContainer\r\n                            placeholder={'Search'}\r\n                            changeValue={changeSearch}\r\n                            errorMessage={''}\r\n                            typeInput={'text'}\r\n                            value={searchTitle}\r\n                        />\r\n                        <button onClick={() => {\r\n                            dispatch(setPackNameAC(''))\r\n                        }}>X\r\n                        </button>\r\n                    </div>\r\n                    <button onClick={setSearch}>SEARCH</button>\r\n                </div>\r\n                <table className={s.table}>\r\n                    <tr className={s.tableRow}>\r\n                        <th className={s.tableHeader}>{\"NAME\"}</th>\r\n                        <th className={s.tableHeader}>{\"CARDS COUNT\"}</th>\r\n                        <th className={s.tableHeader}>{\"USER NAME\"}</th>\r\n                        <th className={s.tableHeader}>{\"RATING\"}</th>\r\n                        <th className={s.tableHeader}>{\"GRADE\"}</th>\r\n                        <th className={s.tableHeader}>{\"UPDATED\"}</th>\r\n                        {props.user_id && <th>\r\n                            <MainActionButton actionClick={() => setShowModalAdd(true)}\r\n                                              title={\"ADD\"}/>\r\n                        </th>}\r\n                    </tr>\r\n                    {packsList.map((pack) => (\r\n                        <tr key={pack._id} className={s.tableRow}>\r\n                            <td className={s.tableCol}>{pack.name}</td>\r\n                            <td className={s.tableCol}>{pack.cardsCount}</td>\r\n                            <td className={s.tableCol}>{pack.user_name}</td>\r\n                            <td className={s.tableCol}>{pack.rating}</td>\r\n                            <td className={s.tableCol}>{pack.grade}</td>\r\n                            <td className={s.tableCol}>{pack.updated}</td>\r\n                            {(props.user_id) && <ManagePacksButton _id={pack._id} deletePackFun={deletePackFun} />}\r\n                            <td><NavLink to={`/cards-list/${pack._id}`} activeClassName={s.activeLink}>cards\r\n                                list</NavLink>\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                </table>\r\n                <Pagination totalItemsCount={cardPacksTotalCount}\r\n                            pageSize={pageCount}\r\n                            portionSize={10}\r\n                            currentPage={page}\r\n                            onPageChanged={onPageChangedHandler}\r\n                />\r\n            </div>\r\n            <ModalWindowAdd showModal={showModalAdd} setShowModal={setShowModalAdd} />\r\n        </>\r\n    )\r\n}\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../state/redux-store\";\r\nimport {AuthUser, logOutUser} from \"../login/login-reducer\";\r\nimport s from \"./Profile.module.scss\";\r\nimport {PersonalInformation} from \"./PersonalInformation\";\r\nimport {profileResponseType} from \"./profile-reducer\";\r\nimport {PacksList} from \"../packsList/PacksList\";\r\nimport {getPackList} from \"../packsList/packsList-reducer\";\r\nimport {getPacksAPIParamsType} from \"../../api/api\";\r\n\r\n\r\nexport const Profile = () => {\r\n\r\n    const [editModeProfile, setEditModeProfile] = useState<boolean>(false)\r\n\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.login.logIn)\r\n    const idUser = useSelector<AppStateType, string>(state => state.profile.profile._id)\r\n    const loadingRequest = useSelector<AppStateType, boolean>(state => state.login.loadingRequest)\r\n    const profile = useSelector<AppStateType, profileResponseType>(state => state.profile.profile)\r\n    const dispatch = useDispatch()\r\n\r\n    const closeModelWindow = () => setEditModeProfile(false)\r\n\r\n    useEffect(() => {\r\n        if (!idUser) {\r\n            if (!loadingRequest) {\r\n                dispatch(AuthUser())\r\n            }\r\n        }\r\n    }, [idUser])\r\n\r\n    const logOut = () => {\r\n        dispatch(logOutUser())\r\n    }\r\n\r\n    if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <div className={s.profilePageContainer}>\r\n            <div className={s.profileContainer}>\r\n                <div className={s.profileAboutYou}>\r\n                    <img src={profile.avatar && profile.avatar ? profile.avatar : ''} alt=\"user_photo\"/>\r\n                    <div>{profile.name && profile.name}</div>\r\n                    <div>{profile.email && profile.email}</div>\r\n                    <div>I am Front-end developer</div>\r\n                    <div>public card packs count: {profile.publicCardPacksCount && profile.publicCardPacksCount}</div>\r\n                    <div>\r\n                        <button className={s.btnEdit} onClick={() => setEditModeProfile(true)}>Edit profile</button>\r\n                        <button className={s.btnLogout} onClick={logOut}>log out</button>\r\n                    </div>\r\n                </div>\r\n                <div className={s.numberOfCards}>Number of cards</div>\r\n            </div>\r\n            <div className={s.profilePacksList}>\r\n                <h2>My packs list</h2>\r\n                <PacksList user_id={profile._id && profile._id} />\r\n            </div>\r\n            {editModeProfile && <PersonalInformation onClick={closeModelWindow} name={profile.name}\r\n                                                     avatar={profile.avatar}/>\r\n            }\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport styles from './Error404.module.scss'\r\n\r\nexport const Error404 = () => {\r\n    return (\r\n        <div className={styles.pageNotFound}>404</div>\r\n    )\r\n}","import {AppThunkType} from \"../../state/redux-store\";\r\nimport {SetNewPasswordAPI} from \"../../api/api\";\r\n\r\nconst initialStateSetNewPassword = {\r\n    error: '',\r\n    loadingRequest: false,\r\n    success: false,\r\n}\r\n\r\nexport const setNewPasswordReducer = (state: initialSetNewPasswordType = initialStateSetNewPassword, action: actionsSetNewPasswordType): initialSetNewPasswordType => {\r\n    switch (action.type) {\r\n        case 'SET-NEW-PASSWORD/SET-ERROR':\r\n            return {...state, ...action.payload}\r\n        case 'SET-NEW-PASSWORD/SET-LOADING':\r\n            return {...state, ...action.payload}\r\n        case 'SET-NEW-PASSWORD/SET-SUCCESS':\r\n            return {...state, ...action.payload}\r\n        default: return state\r\n    }\r\n}\r\n\r\n//AC\r\nexport const setServerErrorMessage = (error: string) => ({type: 'SET-NEW-PASSWORD/SET-ERROR', payload: {error}} as const)\r\nconst setLoading = (loadingRequest: boolean) => ({type: 'SET-NEW-PASSWORD/SET-LOADING', payload: {loadingRequest}} as const)\r\nconst setSuccess = (success: boolean) => ({type: 'SET-NEW-PASSWORD/SET-SUCCESS', payload: {success}} as const)\r\n\r\n//TC\r\nexport const setNewPasswordThunk = (password: string, token: string): AppThunkType => async (dispatch) => {\r\n    dispatch(setLoading(true))\r\n\r\n    try {\r\n        const response = await SetNewPasswordAPI.setNewPassword(password, token)\r\n        dispatch(setSuccess(true))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(setServerErrorMessage(error))\r\n\r\n        dispatch(setSuccess(false))\r\n    } finally {\r\n        dispatch(setLoading(false))\r\n    }\r\n}\r\n\r\n//types\r\nexport type initialSetNewPasswordType = typeof initialStateSetNewPassword\r\nexport type actionsSetNewPasswordType = ReturnType<typeof setServerErrorMessage>\r\n    | ReturnType<typeof setLoading>\r\n    | ReturnType<typeof setSuccess>","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport s from './Enter-new-password.module.scss'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\nimport {setServerErrorMessage, setNewPasswordThunk} from \"./enter-new-password-reducer\";\r\nimport {HeaderEnterApp} from \"../../common/HeaderEnterApp/HeaderEnterApp\";\r\nimport {InputContainer} from \"../../common/InputContainer/InputContainer\";\r\nimport {PasswordValidation} from \"../../common/validation/passwordValidation\";\r\nimport {MainActionButton} from \"../../common/MainActionButton/MainActionButton\";\r\nimport {AppStateType} from \"../../state/redux-store\";\r\n\r\nexport const EnterNewPassword = () => {\r\n    const [password, setPassword] = useState<string>('')\r\n    const [error, setError] = useState<string>('')\r\n    const { token } = useParams<{token: string}>()\r\n\r\n    const dispatch = useDispatch()\r\n    const loadingStatus = useSelector<AppStateType, boolean>(state => state.newPassword.loadingRequest)\r\n    const successResponse = useSelector<AppStateType, boolean>(state => state.newPassword.success)\r\n    const serverErrorMessage = useSelector<AppStateType, string>(state => state.newPassword.error)\r\n\r\n    const setNewPassword = () => {\r\n        if (!PasswordValidation(password)) {\r\n            setError('Minimum 8 characters')\r\n        } else {\r\n            dispatch(setNewPasswordThunk(password, token))\r\n        }\r\n    }\r\n\r\n    const inputPassword = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(event.currentTarget.value)\r\n        setError('')\r\n        serverErrorMessage && dispatch(setServerErrorMessage(''))\r\n    }\r\n\r\n    if (successResponse) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.containerNewPassword}>\r\n            <HeaderEnterApp title={'Create new password'}/>\r\n\r\n            <InputContainer\r\n                title={'Password'}\r\n                value={password}\r\n                changeValue={inputPassword}\r\n                errorMessage={error}\r\n                typeInput={'password'}\r\n            />\r\n\r\n            <p className={s.textAction}>Create new password and we will send you further instructions to email</p>\r\n            <div className={s.positionActionBtn}>\r\n                <span className={s.errorMessageContainer}>{serverErrorMessage}</span>\r\n                <div className={s.blueBtnContainer}>\r\n                    <MainActionButton\r\n                        loadingStatus={loadingStatus}\r\n                        actionClick={setNewPassword}\r\n                        disabledBtnSubmit={!password}\r\n                        title={'Create new password'} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import {AppThunkType} from \"../../state/redux-store\";\r\nimport {PasswordRecoveryAPI} from \"../../api/api\";\r\n\r\nconst initialStatePasswordRecovery = {\r\n    error: '',\r\n    loadingRequest: false,\r\n    success: false,\r\n}\r\n\r\nexport const passwordRecoveryReducer = (state: initialPasswordRecoveryType = initialStatePasswordRecovery, action: actionsPasswordRecoveryType): initialPasswordRecoveryType => {\r\n    switch (action.type) {\r\n        case 'PASSWORD-RECOVERY/SET-ERROR':\r\n            return {...state, ...action.payload}\r\n        case 'PASSWORD-RECOVERY/SET-LOADING':\r\n            return {...state, ...action.payload}\r\n        case 'PASSWORD-RECOVERY/SET-SUCCESS':\r\n            return {...state, ...action.payload}\r\n        default: return state\r\n    }\r\n}\r\n\r\n//actionC\r\nconst setLoadingRequest = (loadingRequest: boolean) => ({\r\n    type: 'PASSWORD-RECOVERY/SET-LOADING',\r\n    payload: {loadingRequest}\r\n} as const)\r\nexport const setSuccess = (success: boolean) => ({\r\n    type: 'PASSWORD-RECOVERY/SET-SUCCESS',\r\n    payload: {success}\r\n} as const)\r\nexport const setServerErrorMessageRecovery = (error: string) => {\r\n    return {\r\n        type: 'PASSWORD-RECOVERY/SET-ERROR',\r\n        payload: {error}\r\n    } as const\r\n}\r\n\r\n//thunkC\r\nexport const passwordRecoveryThunk = (email: string): AppThunkType => async (dispatch) => {\r\n    dispatch(setLoadingRequest(true))\r\n\r\n    try {\r\n        const response = await PasswordRecoveryAPI.forgot(email)\r\n        dispatch(setSuccess(true))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(setServerErrorMessageRecovery(error))\r\n\r\n        dispatch(setSuccess(false))\r\n    } finally {\r\n        dispatch(setLoadingRequest(false))\r\n    }\r\n}\r\n\r\n//types\r\nexport type initialPasswordRecoveryType = typeof initialStatePasswordRecovery\r\nexport type actionsPasswordRecoveryType =\r\n    | ReturnType<typeof setLoadingRequest>\r\n    | ReturnType<typeof setSuccess>\r\n    | ReturnType<typeof setServerErrorMessageRecovery>","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport st from './Password-recovery.module.scss'\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {passwordRecoveryThunk, setServerErrorMessageRecovery, setSuccess} from \"./password-recovery-reducer\";\r\n\r\nimport s from \"../login/Login.module.scss\";\r\nimport {InputContainer} from \"../../common/InputContainer/InputContainer\";\r\nimport {emailValidation} from \"../../common/validation/EmailValidation\";\r\nimport {HeaderEnterApp} from \"../../common/HeaderEnterApp/HeaderEnterApp\";\r\nimport {MainActionButton} from \"../../common/MainActionButton/MainActionButton\";\r\nimport {AppStateType} from \"../../state/redux-store\";\r\n\r\nexport const PasswordRecovery = () => {\r\n    const [email, setEmail] = useState<string>('hardtruenew39@gmail.com')\r\n    const [error, setError] = useState<string>('')\r\n    const disabledBtnSubmit = !email\r\n\r\n    const dispatch = useDispatch()\r\n    const loadingStatus = useSelector<AppStateType, boolean>(state => state.PasswordRecovery.loadingRequest)\r\n    const success = useSelector<AppStateType, boolean>(state => state.PasswordRecovery.success)\r\n    const serverErrorMessage = useSelector<AppStateType, string>(state => state.PasswordRecovery.error)\r\n\r\n    const sendLetter = () => {\r\n        !emailValidation(email) ?\r\n            setError('Incorrect email')\r\n            :\r\n            dispatch(passwordRecoveryThunk(email))\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(setSuccess(false))\r\n            dispatch(setServerErrorMessageRecovery(''))\r\n        }\r\n    }, [])\r\n\r\n    const inputEmail = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setError('')\r\n        setEmail(event.currentTarget.value)\r\n        serverErrorMessage && dispatch(setServerErrorMessageRecovery(''))\r\n        if (emailValidation(event.currentTarget.value)) {\r\n            setError('')\r\n        }\r\n    }\r\n\r\n    if (success) {\r\n        return <Redirect to={`/password-recovery-check-email/${email}`}/>\r\n    }\r\n\r\n    return (\r\n        <div className={st.forgotPasswordContainer}>\r\n            <HeaderEnterApp title={'Forgot your password?'}/>\r\n            <InputContainer\r\n                placeholder={'Email'}\r\n                changeValue={inputEmail}\r\n                errorMessage={error}\r\n                typeInput={'email'}\r\n                value={email}\r\n            />\r\n            <p className={st.textAction}>Enter your email address and we will send you further instructions</p>\r\n\r\n            <div className={s.btnFooterLoginContainer}>\r\n                <span className={s.errorMessageContainer}>{serverErrorMessage}</span>\r\n                <div className={s.blueBtnContainer}>\r\n                    <MainActionButton\r\n                        title={'Send Instructions'}\r\n                        actionClick={sendLetter}\r\n                        disabledBtnSubmit={disabledBtnSubmit}\r\n                        loadingStatus={loadingStatus}\r\n                    />\r\n                </div>\r\n                <p className={s.DifferentAccountBtn}>Did you remember your password?</p>\r\n                <NavLink to=\"/login\" className={s.footerBtn}>Try logging in</NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {Dispatch} from \"redux\";\r\nimport {AppThunkType} from \"../../state/redux-store\";\r\nimport {registrationAPI} from \"../../api/api\";\r\n\r\nconst initialStateRegistration = {\r\n    isRegistration: false,\r\n    loadingRequest: false,\r\n    error: ''\r\n}\r\n\r\nexport const registrationReducer = (state: initialRegistrationType = initialStateRegistration, action: actionsRegistrationType): initialRegistrationType => {\r\n    switch (action.type) {\r\n        case 'REGISTRATION/SET-REGISTRATION':\r\n            return {...state, ...action.payload}\r\n        case 'REGISTRATION/LOADING-REQUEST':\r\n            return {...state, ...action.payload}\r\n        case 'LOGIN/INCORRECT-DATA-LOG-IN':\r\n            return {...state, ...action.payload}\r\n        default: return state\r\n    }\r\n}\r\n\r\n//actionC\r\nexport const setRegistrationAC = (isRegistration: boolean) => ({\r\n    type: 'REGISTRATION/SET-REGISTRATION', payload: {isRegistration}\r\n} as const)\r\nconst loadingRequest = (loadingRequest: boolean) => ({\r\n    type: 'REGISTRATION/LOADING-REQUEST',\r\n    payload: {loadingRequest}\r\n} as const)\r\nexport const setServerErrorMessageRegistration = (error: string) => {\r\n    return {\r\n        type: 'LOGIN/INCORRECT-DATA-LOG-IN',\r\n        payload: {error}\r\n    } as const\r\n}\r\n\r\n//thunkC\r\nexport const setRegistration = (email: string, password: string): AppThunkType => async (dispatch: Dispatch<actionsRegistrationType>) => {\r\n    dispatch(loadingRequest(true))\r\n\r\n    try {\r\n        const response = await registrationAPI.register(email, password)\r\n        dispatch(setRegistrationAC(true))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(setServerErrorMessageRegistration(error))\r\n    } finally {\r\n        dispatch(loadingRequest(false))\r\n    }\r\n}\r\n\r\n//types\r\nexport type initialRegistrationType = typeof initialStateRegistration\r\nexport type actionsRegistrationType = ReturnType<typeof setRegistrationAC>\r\n    | ReturnType<typeof loadingRequest>\r\n    | ReturnType<typeof setServerErrorMessageRegistration>","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport s from './Registration.module.scss'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../state/redux-store\";\r\nimport {setRegistration, setRegistrationAC, setServerErrorMessageRegistration} from \"./regidtration-reducer\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {InputContainer} from \"../../common/InputContainer/InputContainer\";\r\nimport {emailValidation} from \"../../common/validation/EmailValidation\";\r\nimport {PasswordValidation} from \"../../common/validation/passwordValidation\";\r\nimport {HeaderEnterApp} from \"../../common/HeaderEnterApp/HeaderEnterApp\";\r\nimport {MainActionButton} from \"../../common/MainActionButton/MainActionButton\";\r\n\r\nexport const Registration = () => {\r\n    const [email, setEmail] = useState<string>('')\r\n    const [password, setPassword] = useState<string>('')\r\n    const [checkPassword, setCheckPassword] = useState<string>('')\r\n\r\n    const [errorEmailMessage, setErrorEmailMessage] = useState<string>('')\r\n    const [errorPasswordMessage, setErrorPasswordMessage] = useState<string>('')\r\n\r\n    const disabledBtnSubmit = !email || !password || !checkPassword\r\n\r\n    const dispatch = useDispatch()\r\n    const loadingStatus = useSelector<AppStateType, boolean>(state => state.registration.loadingRequest)\r\n    const isRegistration = useSelector<AppStateType, boolean>(state => state.registration.isRegistration)\r\n    const serverErrorMessage = useSelector<AppStateType, string>(state => state.registration.error)\r\n\r\n    const onChangeEmail = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setErrorEmailMessage('')\r\n        setEmail(e.currentTarget.value)\r\n        serverErrorMessage && dispatch(setServerErrorMessageRegistration(''))\r\n    }\r\n\r\n    const onChangePassword = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setErrorPasswordMessage('')\r\n        setPassword(e.currentTarget.value)\r\n        serverErrorMessage && dispatch(setServerErrorMessageRegistration(''))\r\n    }\r\n\r\n    const onChangeCheckPassword = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setErrorPasswordMessage('')\r\n        setCheckPassword(e.currentTarget.value)\r\n        serverErrorMessage && dispatch(setServerErrorMessageRegistration(''))\r\n    }\r\n\r\n    const onRegistration = () => {\r\n        if (!emailValidation(email)) {\r\n            setErrorEmailMessage('Incorrect email')\r\n        } else if (!PasswordValidation(password)) {\r\n            setErrorPasswordMessage('Minimum 8 characters')\r\n        } else if (password !== checkPassword) {\r\n            setErrorPasswordMessage('Enter the same password')\r\n        } else {\r\n            dispatch(setRegistration(email, password))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(setServerErrorMessageRegistration(''))\r\n            dispatch(setRegistrationAC(false))\r\n        }\r\n    }, [])\r\n\r\n    if (isRegistration) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    const goBack = () => {\r\n        window.history.go(-1);\r\n    }\r\n\r\n    return (\r\n        <div className={s.registrationContainer}>\r\n            <HeaderEnterApp title={'Sign Up'}/>\r\n            <div className={s.inputFields}>\r\n                <InputContainer\r\n                    title={'Email'}\r\n                    typeInput={'email'}\r\n                    value={email}\r\n                    changeValue={onChangeEmail}\r\n                    errorMessage={errorEmailMessage}\r\n                />\r\n                <InputContainer\r\n                    title={'password'}\r\n                    typeInput={'password'}\r\n                    value={password}\r\n                    changeValue={onChangePassword}\r\n                    errorMessage={errorPasswordMessage}\r\n                />\r\n                <InputContainer\r\n                    title={'Confirm password'}\r\n                    typeInput={'password'}\r\n                    value={checkPassword}\r\n                    changeValue={onChangeCheckPassword}\r\n                    errorMessage={errorPasswordMessage}\r\n                />\r\n            </div>\r\n\r\n            <div className={s.positionBtnsAndError}>\r\n                <span className={s.errorMessageContainer}>{serverErrorMessage}</span>\r\n\r\n                <div className={s.btns}>\r\n                    <a className={s.btnCancel} onClick={goBack}>Cancel</a>\r\n                    <div className={s.blueBtnContainer}>\r\n                        <MainActionButton\r\n                            actionClick={onRegistration}\r\n                            disabledBtnSubmit={disabledBtnSubmit}\r\n                            title={'Register'}\r\n                            loadingStatus={loadingStatus}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './Navbar.module.scss';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport const Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/login\" activeClassName={s.activeLink}>login</NavLink>\r\n            </div>\r\n            {/*<div className={s.item}>*/}\r\n            {/*    <NavLink to=\"/new-password\" activeClassName={s.activeLink}>new password</NavLink>*/}\r\n            {/*</div>*/}\r\n            <div className={s.item}>\r\n                <NavLink to=\"/password-recovery\" activeClassName={s.activeLink}>password recovery</NavLink>\r\n            </div>\r\n            {/*<div className={s.item}>*/}\r\n            {/*    <NavLink to=\"/password-recovery-check-email\" activeClassName={s.activeLink}>check email</NavLink>*/}\r\n            {/*</div>*/}\r\n            <div className={s.item}>\r\n                <NavLink to=\"/registration\" activeClassName={s.activeLink}>registration</NavLink>\r\n            </div>\r\n            {/*<div className={s.item}>*/}\r\n            {/*    <NavLink to=\"/test-components\" activeClassName={s.activeLink}>test components</NavLink>*/}\r\n            {/*</div>*/}\r\n            <div className={s.item}>\r\n                <NavLink to=\"/packs-list\" activeClassName={s.activeLink}>packs list</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/checkEmail.bc3a4042.svg\";","import React from \"react\";\r\nimport s from './Password-recovery.module.scss'\r\nimport checkEmail from '../../media/password/checkEmail.svg'\r\nimport {useParams} from \"react-router-dom\";\r\n\r\nexport const CheckEmail = () => {\r\n    const {email} = useParams<{ email: string }>()\r\n\r\n    return (\r\n        <div className={s.containerCheckEmail}>\r\n            <p className={s.headerCheckEmail}>It-incubator</p>\r\n            <div className={s.imageCheckEmail}>\r\n                <img src={checkEmail} alt={'Check email'}/>\r\n            </div>\r\n            <p className={s.titleCheckEmail}>Check Email</p>\r\n            <p className={s.textActionCheckEmail}>We’ve sent an Email with instructions to {email}</p>\r\n        </div>\r\n    )\r\n}","import {\r\n    addCardDataType,\r\n    addCardsPackDataType,\r\n    CardsListAPI,\r\n    cardType, getCardsAPIParamsType,\r\n    PacksListAPI,\r\n} from \"../../api/api\";\r\nimport {AppThunkType, GetAppStateType} from \"../../state/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {actionPacksListType, GetPacksListAC} from \"../packsList/packsList-reducer\";\r\n\r\nconst initialState = {\r\n    arrayCard: [] as Array<cardType>,\r\n    success: false\r\n}\r\n\r\n//types\r\ntype initialStateType = typeof initialState\r\ntype GetCardsListAT = ReturnType<typeof GetCardsListAC>\r\n\r\nexport type actionCardsListType = GetCardsListAT | SetSuccessAT\r\ntype SetSuccessAT = ReturnType<typeof SetSuccessAC>\r\n\r\n//actionC\r\nexport const GetCardsListAC = (params: Array<cardType>) => ({type: 'cardList/GET-CARDSLIST', params} as const)\r\nexport const SetSuccessAC = (success: boolean) => ({type: 'cardList/SET-SUCCESS', success} as const)\r\n\r\nexport const cardsListReducer = (state = initialState, action: actionCardsListType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"cardList/GET-CARDSLIST\":\r\n            return {...state, arrayCard: action.params.map(cl => ({...cl}))}\r\n        case \"cardList/SET-SUCCESS\":\r\n            return {...state, success: action.success}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//thunkC\r\nexport const getCardsList = (params: getCardsAPIParamsType): AppThunkType => async (dispatch: Dispatch<actionCardsListType>, getStore: GetAppStateType) => {\r\n\r\n    try {\r\n        const response = await CardsListAPI.getCards({...params})\r\n        dispatch(GetCardsListAC(response.data.cards))\r\n        dispatch(SetSuccessAC(true))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(SetSuccessAC(false))\r\n    } finally {\r\n    }\r\n}\r\n\r\nexport const addCard = (data: addCardDataType): AppThunkType => async (dispatch: Dispatch<actionCardsListType>) => {\r\n\r\n    try {\r\n        const responseAdd = await CardsListAPI.addCard(data)\r\n        const response = await CardsListAPI.getCards({cardPack_id: data.card.cardsPack_id})\r\n        dispatch(GetCardsListAC(response.data.cards))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n    } finally {\r\n    }\r\n}\r\n\r\nexport const deleteCard = (params: {id: string, cardPack_id: string}): AppThunkType => async (dispatch: Dispatch<actionCardsListType>) => {\r\n\r\n    try {\r\n        const responseDelete = await CardsListAPI.deleteCard(params)\r\n        const response = await CardsListAPI.getCards({cardPack_id: params.cardPack_id})\r\n        dispatch(GetCardsListAC(response.data.cards))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n    } finally {\r\n    }\r\n}\r\n\r\nexport const updateCard = (data: { card: { _id: string, question?: string, answer?: string, comments?: string }, cardPack_id: string }): AppThunkType => async (dispatch: Dispatch<actionCardsListType>) => {\r\n\r\n    try {\r\n        const responseUpdate = await CardsListAPI.changeCard(data)\r\n        const response = await CardsListAPI.getCards({cardPack_id: data.cardPack_id})\r\n        dispatch(GetCardsListAC(response.data.cards))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n    } finally {\r\n    }\r\n}\r\n\r\n","import React from \"react\";\r\nimport {MainActionButton} from \"../../common/MainActionButton/MainActionButton\";\r\n\r\ntype ManageButtonPropsType = {\r\n    _id: string\r\n    cardPack_id: string\r\n    deleteCardFun: (id: string, cardPack_id: string) => void\r\n}\r\n\r\nexport const ManageCardsButton: React.FC<ManageButtonPropsType> = (props) => {\r\n    return (\r\n        <>\r\n            <td>\r\n                <MainActionButton actionClick={() => props.deleteCardFun(props._id, props.cardPack_id)}\r\n                                  title={\"DELETE\"}/>\r\n            </td>\r\n            <td>\r\n                <MainActionButton actionClick={() => {}}\r\n                                  title={\"UPDATE\"}/>\r\n            </td>\r\n        </>\r\n    )\r\n}","import s from './CardsList.module.scss'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {addCard, deleteCard, getCardsList} from \"./cardsList-reducer\";\r\nimport {AppStateType} from \"../../state/redux-store\";\r\nimport {cardType} from \"../../api/api\";\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\nimport {AuthUser} from \"../login/login-reducer\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {addPack} from \"../packsList/packsList-reducer\";\r\nimport {ManageCardsButton} from \"./ManageCardsButton\";\r\nimport {MainActionButton} from \"../../common/MainActionButton/MainActionButton\";\r\n\r\nexport const CardsList = () => {\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.login.logIn)\r\n    const idUser = useSelector<AppStateType, string>(state => state.profile.profile._id)\r\n    const success = useSelector<AppStateType, boolean>(state => state.cardsList.success)\r\n    const dispatch = useDispatch();\r\n    const {id} = useParams<{ id: string }>()\r\n\r\n    useEffect(() => {\r\n        if (!idUser) {\r\n            dispatch(AuthUser())\r\n        } else {\r\n            dispatch(getCardsList({cardPack_id: id}))\r\n        }\r\n    }, [dispatch, id])\r\n\r\n    const cardsList = useSelector<AppStateType, Array<cardType>>(state => state.cardsList.arrayCard)\r\n\r\n    const addCardFun = () => {\r\n        dispatch(addCard({card: {cardsPack_id: id}}))\r\n    }\r\n\r\n    const deleteCardFun = (id: string, cardPack_id: string) => {\r\n        dispatch(deleteCard({id, cardPack_id}))\r\n    }\r\n\r\n    if (!isAuth) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    if (!success) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <table className={s.table}>\r\n            <tr className={s.tableRow}>\r\n                <th className={s.tableHeader}>{\"QUESTION\"}</th>\r\n                <th className={s.tableHeader}>{\"ANSWER\"}</th>\r\n                <th className={s.tableHeader}>{\"GRADE\"}</th>\r\n                <th className={s.tableHeader}>{\"UPDATED\"}</th>\r\n                <th>\r\n                    <MainActionButton actionClick={addCardFun}\r\n                                      title={\"ADD\"}/>\r\n                </th>\r\n            </tr>\r\n            {cardsList.map((card) => (\r\n                <tr key={card._id} className={s.tableRow}>\r\n                    <td className={s.tableCol}>{card.question}</td>\r\n                    <td className={s.tableCol}>{card.answer}</td>\r\n                    <td className={s.tableCol}>{card.grade}</td>\r\n                    <td className={s.tableCol}>{card.updated}</td>\r\n                    <ManageCardsButton _id={card._id} cardPack_id={card.cardsPack_id} deleteCardFun={deleteCardFun}/>\r\n                </tr>\r\n            ))}\r\n        </table>\r\n    )\r\n}","import React, {useEffect} from 'react';\nimport './App.css';\nimport {Route, Switch} from \"react-router-dom\";\nimport {Login} from \"./components/login/Login\";\nimport {Profile} from \"./components/profile/Profile\";\nimport {Error404} from \"./common/Error404/Error404\";\nimport {EnterNewPassword} from \"./components/enterNewPassword/Enter-new-password\";\nimport {PasswordRecovery} from \"./components/passwordRecovery/Password-recovery\";\nimport {Registration} from \"./components/registration/Registration\";\nimport {Navbar} from \"./components/navbar/Navbar\";\nimport {CheckEmail} from \"./components/passwordRecovery/ChekEmail\";\nimport {PacksList} from \"./components/packsList/PacksList\";\nimport { CardsList } from './components/cardsList/CardsList';\nimport {useSelector} from \"react-redux\";\nimport {AppStateType} from \"./state/redux-store\";\n\nfunction App() {\n  const auth = true\n  return (\n      <div className=\"App\">\n        <Navbar />\n        <main className={'mainContainer'}>\n          <Switch>\n            <Route exact path={'/'} render={() => <Profile/>}/>\n            <Route path={'/learning-cards/'} render={() => <div>Hi!</div>}/>\n            <Route exact path={'/login'} render={() => <Login/>}/>\n            <Route path={'/profile'} render={() => <Profile/>}/>\n            <Route path={'/new-password/:token'} render={() => <EnterNewPassword/>}/>\n            <Route exact path={'/password-recovery'} render={() => <PasswordRecovery/>}/>\n            <Route path={'/password-recovery-check-email/:email'} render={() => <CheckEmail/>}/>\n            <Route exact path={'/registration'} render={() => <Registration/>}/>\n            <Route exact path={'/packs-list'} render={() => <PacksList/>}/>\n            <Route exact path={'/cards-list/:id'} render={() => <CardsList/>}/>\n            <Route path={'*'} render={() => <Error404/>}/>\n          </Switch>\n        </main>\n      </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport thunk, {ThunkAction} from 'redux-thunk';\r\nimport {actionsLoginType, loginReducer} from \"../components/login/login-reducer\";\r\nimport {\r\n    actionsPasswordRecoveryType,\r\n    passwordRecoveryReducer\r\n} from \"../components/passwordRecovery/password-recovery-reducer\";\r\nimport {\r\n    actionsSetNewPasswordType,\r\n    setNewPasswordReducer\r\n} from \"../components/enterNewPassword/enter-new-password-reducer\";\r\nimport {actionsProfileType, profileReducer} from \"../components/profile/profile-reducer\";\r\nimport {actionsRegistrationType, registrationReducer} from \"../components/registration/regidtration-reducer\";\r\nimport {actionPacksListType, packsListReducer} from \"../components/packsList/packsList-reducer\";\r\nimport {actionCardsListType, cardsListReducer} from \"../components/cardsList/cardsList-reducer\";\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    login: loginReducer,\r\n    PasswordRecovery: passwordRecoveryReducer,\r\n    newPassword: setNewPasswordReducer,\r\n    profile: profileReducer,\r\n    registration: registrationReducer,\r\n    packsList: packsListReducer,\r\n    cardsList: cardsListReducer,\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type GetAppStateType = () => AppStateType;\r\n\r\ntype AppActionsType = actionsSetNewPasswordType\r\n    | actionsLoginType\r\n    | actionsPasswordRecoveryType\r\n    | actionsProfileType\r\n    | actionsRegistrationType\r\n    | actionPacksListType\r\n    | actionCardsListType\r\n\r\nexport type AppThunkType<ReturnType = void> = ThunkAction<ReturnType,\r\n    AppStateType,\r\n    unknown,\r\n    AppActionsType>\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose\r\n    }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/redux-store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}